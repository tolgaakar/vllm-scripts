{{- bos_token }}
{%- if custom_tools is defined %}
    {%- set tools = custom_tools %}
{%- endif %}
{%- if not tools_in_user_message is defined %}
    {%- set tools_in_user_message = true %}
{%- endif %}
{%- if not date_string is defined %}
    {%- if strftime_now is defined %}
        {%- set date_string = strftime_now("%d %b %Y") %}
    {%- else %}
        {%- set date_string = "29 Jan 2025" %}
    {%- endif %}
{%- endif %}
{%- if not tools is defined %}
    {%- set tools = none %}
{%- endif %}

{#- Helper macro to clean up malformed function calls -#}
{%- macro clean_function_call(text) %}
    {%- set cleaned = text %}
    {#- Remove markdown code block markers -#}
    {%- if cleaned.startswith('```') %}
        {%- set cleaned = cleaned[3:] %}
        {%- if cleaned.endswith('```') %}
            {%- set cleaned = cleaned[:-3] %}
        {%- endif %}
        {#- Remove potential language identifier -#}
        {%- if '\n' in cleaned %}
            {%- set cleaned = cleaned.split('\n', 1)[1] %}
        {%- endif %}
    {%- endif %}

    {#- Remove indentation-based code blocks (4 spaces or tab) -#}
    {%- if cleaned.startswith('    ') or cleaned.startswith('\t') %}
        {%- set cleaned = cleaned.lstrip(' \t') %}
    {%- endif %}

    {%- if cleaned.startswith('{') and cleaned.endswith('}') %}
        {%- set cleaned = cleaned[1:-1] %}
    {%- endif %}
    {%- if cleaned.startswith('[') and cleaned.endswith(']') %}
        {%- set cleaned = cleaned[1:-1] %}
    {%- endif %}
    {%- if cleaned.startswith('(') and cleaned.endswith(')') %}
        {%- set cleaned = cleaned[1:-1] %}
    {%- endif %}
    {%- if cleaned.startswith('"') and cleaned.endswith('"') %}
        {%- set cleaned = cleaned[1:-1] %}
    {%- endif %}
    {%- if cleaned.startswith("'") and cleaned.endswith("'") %}
        {%- set cleaned = cleaned[1:-1] %}
    {%- endif %}
    {%- if cleaned.startswith('`') and cleaned.endswith('`') %}
        {%- set cleaned = cleaned[1:-1] %}
    {%- endif %}
    {#- Final cleanup of any remaining whitespace -#}
    {%- set cleaned = cleaned.strip() %}
    {{- cleaned }}
{%- endmacro %}

{#- Extract system message -#}
{%- if messages[0]['role'] == 'system' %}
    {%- if messages[0]['content'] is string %}
        {%- set system_message = messages[0]['content']|trim -%}
    {%- else %}
        {%- set system_message = messages[0]['content'][0]['text']|trim -%}
    {%- endif %}
    {%- set messages = messages[1:] -%}
{%- else %}
    {%- if tools is not none %}
        {%- set system_message -%}
            You are a helpful assistant with tool calling capabilities. For functions that expect a requestBody format, use {"name": "function_name", "requestBody": {"param": "value"}}. For other functions, use {"name": "function_name", "parameters": {"param": "value"}}. Only call functions that exist in the provided library. YOU MUST STRICTLY ADHERE TO THE FUNCTION FORMAT!
        {%- endset -%}
    {%- else %}
        {%- set system_message -%}
            You are a helpful AI assistant.
        {%- endset -%}
    {%- endif %}
{%- endif %}

{#- System message block -#}
{{- "<|start_header_id|>system<|end_header_id|>\n\n" }}
{%- if builtin_tools is defined or tools is not none %}
    {{- "Environment: ipython\n" }}
{%- endif %}
{%- if builtin_tools is defined %}
    {{- "Tools: " ~ (builtin_tools|join(", ")) ~ "\n\n" }}
{%- endif %}
{{- "Cutting Knowledge Date: December 2023\n" }}
{{- "Today Date: " + date_string + "\n\n" }}
{%- if tools is not none %}
    {{- "IMPORTANT RULES:\n" }}
    {{- "1. Only call functions that exist in the provided library\n" }}
    {{- "2. For functions expecting requestBody:\n" }}
    {{- "   Use format: {\"name\": \"function_name\", \"requestBody\": {\"param\": \"value\"}}\n" }}
    {{- "3. For other functions which do not expect the requestBody:\n" }}
    {{- "   Use format: {\"name\": \"function_name\", \"parameters\": {\"param\": \"value\"}}\n" }}
    {{- "4. When calling a function, ONLY output the function call JSON.\n" }}
    {{- "5. Do not include any additional text or explanations with your function call.\n" }}
    {{- "6. Ensure ALL required parameters are included!\n\n" }}
{%- endif %}
{%- if tools is not none and not tools_in_user_message %}
    {{- "You have access to the following functions. To call a function, please respond with JSON for a function call." }}
    {{- 'For functions expecting requestBody, respond in the format {"name": "function_name", "requestBody": {"param": "value"}}. ' }}
    {{- 'For other functions, respond in the format {"name": "function_name", "parameters": {"param": "value"}}. ' }}
    {{- "Do not use variables.\n\n" }}
    {%- for t in tools %}
        {{- t | tojson(indent=4) }}
        {{- "\n\n" }}
    {%- endfor %}
{%- endif %}
{{- system_message }}
{{- "<|eot_id|>" }}

{#- Custom tools are passed in a user message with some extra guidance #}
{%- if tools_in_user_message and not tools is none %}
    {#- Extract the first user message so we can plug it in here #}
    {%- if messages | length != 0 %}
        {%- set first_user_message = messages[0]['content']|trim %}
        {%- set messages = messages[1:] %}
    {%- else %}
        {{- raise_exception("Cannot put tools in the first user message when there's no first user message!") }}
    {%- endif %}
    {{- '<|start_header_id|>user<|end_header_id|>\n\n' -}}
    {{- "Given the following functions, please respond with a JSON for a function call " }}
    {{- "with its proper arguments that best answers the given prompt.\n\n" }}
    {{- 'For functions expecting requestBody, respond in the format {"name": "function_name", "requestBody": {"param": "value"}}. ' }}
    {{- 'For other functions, respond in the format {"name": "function_name", "parameters": {"param": "value"}}. ' }}
    {{- "Do not use variables.\n\n" }}
    {%- for t in tools %}
        {{- t | tojson(indent=4) }}
        {{- "\n\n" }}
    {%- endfor %}
    {{- first_user_message }}{{- "<|eot_id|>" }}
{%- endif %}

{%- for message in messages %}
    {%- if not (message.role == 'ipython' or message.role == 'tool' or 'tool_calls' in message) %}
        {%- if message.content is string %}
            {{- '<|start_header_id|>' }}{{- message['role'] }}{{- '<|end_header_id|>\n\n' }}{{- clean_function_call(message.content|trim) }}{{- '<|eot_id|>' }}
        {%- else %}
            {%- for content in message.content %}
                {%- if content.type == 'text' %}
                    {{- '<|start_header_id|>' }}{{- message['role'] }}{{- '<|end_header_id|>\n\n' }}{{- clean_function_call(content.text|trim) }}{{- '<|eot_id|>' }}
                {%- endif %}
            {%- endfor %}
        {%- endif %}
    {%- elif 'tool_calls' in message %}
        {%- if not message.tool_calls|length == 1 %}
            {{- raise_exception("This model only supports single tool-calls at once!") }}
        {%- endif %}
        {%- set tool_call = message.tool_calls[0].function %}
        {%- if builtin_tools is defined and tool_call.name in builtin_tools %}
            {{- '<|start_header_id|>assistant<|end_header_id|>\n\n' -}}
            {{- "<|python_tag|>" + tool_call.name + ".call(" }}
            {%- for arg_name, arg_val in tool_call.arguments | items %}
                {{- arg_name + '="' + arg_val + '"' }}
                {%- if not loop.last %}
                    {{- ", " }}
                {%- endif %}
            {%- endfor %}
            {{- ")" }}
        {%- else %}
            {{- '<|start_header_id|>assistant<|end_header_id|>\n\n' -}}
            {%- if tool_call.arguments is mapping and 'requestBody' in tool_call.arguments %}
                {{- '{"name": "' + tool_call.name + '", ' }}
                {{- '"requestBody": ' }}
                {{- tool_call.arguments.requestBody | tojson }}
                {{- "}" }}
            {%- else %}
                {{- '{"name": "' + tool_call.name + '", ' }}
                {{- '"parameters": ' }}
                {{- tool_call.arguments | tojson }}
                {{- "}" }}
            {%- endif %}
        {%- endif %}
        {%- if builtin_tools is defined %}
            {{- "<|eom_id|>" }}
        {%- else %}
            {{- "<|eot_id|>" }}
        {%- endif %}
    {%- elif message.role == "tool" or message.role == "ipython" %}
        {{- "<|start_header_id|>ipython<|end_header_id|>\n\n" }}
        {%- if message.content is mapping or message.content is iterable %}
            {{- message.content | tojson }}
        {%- else %}
            {{- message.content }}
        {%- endif %}
        {{- "<|eot_id|>" }}
    {%- endif %}
{%- endfor %}
{%- if add_generation_prompt %}
    {{- '<|start_header_id|>assistant<|end_header_id|>\n\n' }}
{%- endif %}